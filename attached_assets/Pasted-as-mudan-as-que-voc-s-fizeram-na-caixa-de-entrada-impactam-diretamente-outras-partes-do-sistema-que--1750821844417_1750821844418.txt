as mudan√ßas que voc√™s fizeram na caixa de entrada impactam diretamente outras partes do sistema que tamb√©m dependem de atualiza√ß√£o em tempo real, especialmente se esses pontos compartilhavam a mesma l√≥gica anterior (com Zustand, m√∫ltiplas fontes de dados, etc).

Aqui est√° um mapeamento t√©cnico de onde pode haver impacto direto e o que precisa ser ajustado:

üß≠ √ÅREAS POTENCIALMENTE IMPACTADAS
1Ô∏è‚É£ Lista de conversas (caixa de entrada lateral)
Se essa lista atualizava via useChatStore, agora ela precisa ouvir o WebSocket e atualizar via React Query tamb√©m.

Exemplo: se uma nova mensagem chegar de outro usu√°rio, a conversa correspondente precisa subir na lista, exibir o preview e marcar como "n√£o lida".

üîß O que revisar:

Atualiza√ß√£o do item na lista ao receber nova mensagem

Ordena√ß√£o da lista (√∫ltima mensagem deve subir)

Indica√ß√£o visual de mensagem nova

2Ô∏è‚É£ Notifica√ß√µes em tempo real (badges, toasts, sons etc.)
Qualquer l√≥gica que dependia do Zustand ou escutava eventos duplicados pode estar agora sem receber eventos ou recebendo duplicado.

üîß O que revisar:

As notifica√ß√µes (sons, popups, √≠cones) est√£o vindo apenas do WebSocket, e apenas quando √© o outro usu√°rio enviando

Nenhum evento de nova mensagem pr√≥pria deve disparar alerta (isso j√° est√° na tela)

3Ô∏è‚É£ Pain√©is de supervis√£o / BI / dashboards
Se houver relat√≥rios que mostram, por exemplo, a quantidade de mensagens recebidas em tempo real, atendentes ativos ou tempo de resposta, e esses dados vinham do Zustand ou polling ‚Äî eles agora precisam se conectar ao cache correto do React Query, ou a eventos do WebSocket centralizado.

üîß O que revisar:

As queries que abastecem os pain√©is precisam refletir corretamente o novo estado das conversas

Dados em tempo real devem escutar somente o WebSocket e reagir com setQueryData ou invalidateQueries

4Ô∏è‚É£ Componente de conversa aberta em m√∫ltiplas abas ou dispositivos
Se o mesmo usu√°rio estiver em mais de uma aba (ou em mais de um aparelho), as mensagens enviadas de um local devem aparecer no outro sem atraso nem duplica√ß√£o.

üîß O que revisar:

Garantir que o WebSocket funcione para m√∫ltiplos listeners do mesmo usu√°rio

Evitar inser√ß√£o duplicada de mensagem no React Query