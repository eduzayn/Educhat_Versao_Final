// server/storage/modules/quickReplyStorage.ts
import { BaseStorage } from "../base/BaseStorage";
import { quickReplies, quickReplyTeamShares, quickReplyShares, type QuickReply, type InsertQuickReply } from "@shared/schema";
import { eq, desc, and, or, inArray, like } from "drizzle-orm";

export class QuickReplyStorage extends BaseStorage {
  
  // Buscar todas as respostas rápidas
  async getQuickReplies(): Promise<QuickReply[]> {
    return this.db.select().from(quickReplies).orderBy(desc(quickReplies.createdAt));
  }

  // Buscar resposta rápida por ID
  async getQuickReply(id: number): Promise<QuickReply | undefined> {
    const [quickReply] = await this.db.select().from(quickReplies).where(eq(quickReplies.id, id));
    return quickReply;
  }

  // Criar nova resposta rápida
  async createQuickReply(quickReplyData: InsertQuickReply): Promise<QuickReply> {
    const [newQuickReply] = await this.db.insert(quickReplies).values(quickReplyData).returning();
    return newQuickReply;
  }

  // Atualizar resposta rápida
  async updateQuickReply(id: number, quickReplyData: Partial<InsertQuickReply>): Promise<QuickReply> {
    const [updated] = await this.db.update(quickReplies)
      .set({ ...quickReplyData, updatedAt: new Date() })
      .where(eq(quickReplies.id, id))
      .returning();
    return updated;
  }

  // Deletar resposta rápida
  async deleteQuickReply(id: number): Promise<void> {
    // Deletar compartilhamentos primeiro
    await this.deleteQuickReplyTeamShares(id);
    await this.deleteQuickReplyUserShares(id);
    
    // Deletar a resposta rápida
    await this.db.delete(quickReplies).where(eq(quickReplies.id, id));
  }

  // Incrementar contador de uso
  async incrementQuickReplyUsage(id: number): Promise<void> {
    const [current] = await this.db.select({ usageCount: quickReplies.usageCount })
      .from(quickReplies)
      .where(eq(quickReplies.id, id));
    
    await this.db.update(quickReplies)
      .set({ 
        usageCount: (current?.usageCount || 0) + 1,
        updatedAt: new Date()
      })
      .where(eq(quickReplies.id, id));
  }

  // Buscar por categoria
  async getQuickRepliesByCategory(category: string): Promise<QuickReply[]> {
    return this.db.select().from(quickReplies)
      .where(eq(quickReplies.category, category))
      .orderBy(desc(quickReplies.createdAt));
  }

  // Buscar respostas rápidas
  async searchQuickReplies(params: {
    query: string;
    category?: string;
    type?: string;
    userId?: number;
  }): Promise<QuickReply[]> {
    const conditions = [];
    
    if (params.query) {
      conditions.push(
        or(
          like(quickReplies.title, `%${params.query}%`),
          like(quickReplies.description, `%${params.query}%`),
          like(quickReplies.content, `%${params.query}%`)
        )
      );
    }
    
    if (params.category) {
      conditions.push(eq(quickReplies.category, params.category));
    }
    
    if (params.type) {
      conditions.push(eq(quickReplies.type, params.type));
    }

    return this.db.select().from(quickReplies)
      .where(and(...conditions))
      .orderBy(desc(quickReplies.createdAt));
  }

  // Buscar mais usadas
  async getMostUsedQuickReplies(limit: number = 10): Promise<QuickReply[]> {
    return this.db.select().from(quickReplies)
      .orderBy(desc(quickReplies.usageCount))
      .limit(limit);
  }

  // Buscar respostas rápidas do usuário
  async getUserQuickReplies(userId: number): Promise<QuickReply[]> {
    return this.db.select().from(quickReplies)
      .where(eq(quickReplies.createdBy, userId))
      .orderBy(desc(quickReplies.createdAt));
  }

  // Buscar categorias
  async getQuickReplyCategories(): Promise<string[]> {
    const result = await this.db.select({ category: quickReplies.category })
      .from(quickReplies)
      .groupBy(quickReplies.category);
    
    return result.map(r => r.category).filter(Boolean);
  }

  // Compartilhamento com equipe
  async createQuickReplyTeamShare(share: any): Promise<any> {
    const [newShare] = await this.db.insert(quickReplyTeamShares).values(share).returning();
    return newShare;
  }

  // Compartilhamento com usuário
  async createQuickReplyUserShare(share: any): Promise<any> {
    const [newShare] = await this.db.insert(quickReplyShares).values(share).returning();
    return newShare;
  }

  // Deletar compartilhamentos
  async deleteQuickReplyTeamShares(quickReplyId: number): Promise<void> {
    await this.db.delete(quickReplyTeamShares).where(eq(quickReplyTeamShares.quickReplyId, quickReplyId));
  }

  async deleteQuickReplyUserShares(quickReplyId: number): Promise<void> {
    await this.db.delete(quickReplyShares).where(eq(quickReplyShares.quickReplyId, quickReplyId));
  }
}