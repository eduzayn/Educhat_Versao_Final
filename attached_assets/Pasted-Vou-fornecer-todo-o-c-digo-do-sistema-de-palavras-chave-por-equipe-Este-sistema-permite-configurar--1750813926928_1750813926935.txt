Vou fornecer todo o c√≥digo do sistema de palavras-chave por equipe. Este sistema permite configurar palavras-chave que automaticamente direcionam conversas para equipes espec√≠ficas.

1. Schema de Banco de Dados (shared/schema.ts)
export const keywordRouting = pgTable("keyword_routing", {
  id: serial("id").primaryKey(),
  keyword: varchar("keyword", { length: 255 }).notNull(),
  teamId: integer("team_id").references(() => teams.id, { onDelete: "cascade" }).notNull(),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});
export const insertKeywordRoutingSchema = createInsertSchema(keywordRouting).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});
export type KeywordRouting = typeof keywordRouting.$inferSelect;
export type InsertKeywordRouting = z.infer<typeof insertKeywordRoutingSchema>;
2. Storage Module (server/storage/modules/keywordRoutingStorage.ts)
import { eq, and, ilike, desc } from "drizzle-orm";
import { db } from "../../db";
import { keywordRouting, teams } from "../../../shared/schema";
import type { KeywordRouting, InsertKeywordRouting } from "../../../shared/schema";
export class KeywordRoutingStorage {
  /**
   * Busca todas as configura√ß√µes de palavra-chave
   */
  async getKeywordRoutings(): Promise<KeywordRouting[]> {
    try {
      return await db
        .select()
        .from(keywordRouting)
        .orderBy(desc(keywordRouting.createdAt));
    } catch (error) {
      console.error("Erro ao buscar configura√ß√µes de palavra-chave:", error);
      throw error;
    }
  }
  /**
   * Busca configura√ß√£o por ID
   */
  async getKeywordRouting(id: number): Promise<KeywordRouting | undefined> {
    try {
      const result = await db
        .select()
        .from(keywordRouting)
        .where(eq(keywordRouting.id, id))
        .limit(1);
      return result[0];
    } catch (error) {
      console.error("Erro ao buscar configura√ß√£o por ID:", error);
      throw error;
    }
  }
  /**
   * Cria nova configura√ß√£o de palavra-chave
   */
  async createKeywordRouting(data: InsertKeywordRouting): Promise<KeywordRouting> {
    try {
      const result = await db
        .insert(keywordRouting)
        .values({
          ...data,
          keyword: data.keyword.toLowerCase().trim(),
        })
        .returning();
      return result[0];
    } catch (error) {
      console.error("Erro ao criar configura√ß√£o de palavra-chave:", error);
      throw error;
    }
  }
  /**
   * Atualiza configura√ß√£o existente
   */
  async updateKeywordRouting(id: number, data: Partial<InsertKeywordRouting>): Promise<KeywordRouting> {
    try {
      const updateData = { ...data };
      if (updateData.keyword) {
        updateData.keyword = updateData.keyword.toLowerCase().trim();
      }
      const result = await db
        .update(keywordRouting)
        .set({
          ...updateData,
          updatedAt: new Date(),
        })
        .where(eq(keywordRouting.id, id))
        .returning();
      return result[0];
    } catch (error) {
      console.error("Erro ao atualizar configura√ß√£o:", error);
      throw error;
    }
  }
  /**
   * Remove configura√ß√£o
   */
  async deleteKeywordRouting(id: number): Promise<void> {
    try {
      await db
        .delete(keywordRouting)
        .where(eq(keywordRouting.id, id));
    } catch (error) {
      console.error("Erro ao deletar configura√ß√£o:", error);
      throw error;
    }
  }
  /**
   * Busca equipe com base na mensagem
   */
  async findTeamByMessage(message: string): Promise<number | null> {
    try {
      const normalizedMessage = message.toLowerCase().trim();
      
      const results = await db
        .select({
          teamId: keywordRouting.teamId,
          keyword: keywordRouting.keyword,
        })
        .from(keywordRouting)
        .where(and(
          eq(keywordRouting.isActive, true)
        ));
      // Procura por matches exatos primeiro
      for (const config of results) {
        if (normalizedMessage.includes(config.keyword.toLowerCase())) {
          console.log(`üéØ Palavra-chave encontrada: "${config.keyword}" -> Team ${config.teamId}`);
          return config.teamId;
        }
      }
      return null;
    } catch (error) {
      console.error("Erro ao buscar equipe por mensagem:", error);
      return null;
    }
  }
  /**
   * Busca configura√ß√µes por equipe
   */
  async getKeywordRoutingsByTeam(teamId: number): Promise<KeywordRouting[]> {
    try {
      return await db
        .select()
        .from(keywordRouting)
        .where(eq(keywordRouting.teamId, teamId))
        .orderBy(desc(keywordRouting.createdAt));
    } catch (error) {
      console.error("Erro ao buscar configura√ß√µes por equipe:", error);
      throw error;
    }
  }
  /**
   * Verifica se palavra-chave j√° existe
   */
  async keywordExists(keyword: string, excludeId?: number): Promise<boolean> {
    try {
      const normalizedKeyword = keyword.toLowerCase().trim();
      
      let query = db
        .select({ id: keywordRouting.id })
        .from(keywordRouting)
        .where(eq(keywordRouting.keyword, normalizedKeyword));
      if (excludeId) {
        query = query.where(and(
          eq(keywordRouting.keyword, normalizedKeyword),
          // Use not equal for excluding the ID
          // Note: Drizzle doesn't have a direct `ne` function, so we use SQL
          // This is a workaround - in production you might want to use raw SQL
        ));
      }
      const result = await query.limit(1);
      return result.length > 0;
    } catch (error) {
      console.error("Erro ao verificar se palavra-chave existe:", error);
      return false;
    }
  }
  /**
   * Toggle status ativo/inativo
   */
  async toggleKeywordRoutingStatus(id: number): Promise<KeywordRouting> {
    try {
      // Buscar status atual
      const current = await this.getKeywordRouting(id);
      if (!current) {
        throw new Error("Configura√ß√£o n√£o encontrada");
      }
      // Inverter status
      const result = await db
        .update(keywordRouting)
        .set({
          isActive: !current.isActive,
          updatedAt: new Date(),
        })
        .where(eq(keywordRouting.id, id))
        .returning();
      return result[0];
    } catch (error) {
      console.error("Erro ao alternar status:", error);
      throw error;
    }
  }
}
3. API Routes (server/routes/keywordRouting/index.ts)
import { Router, type Request, type Response } from "express";
import { z } from "zod";
import { storage } from "../../storage";
import { insertKeywordRoutingSchema } from "../../../shared/schema";
import { requireAuth } from "../auth/middleware";
const router = Router();
// Aplicar middleware de autentica√ß√£o
router.use(requireAuth);
/**
 * GET /api/keyword-routing
 * Lista todas as configura√ß√µes de palavra-chave
 */
router.get("/", async (req: Request, res: Response) => {
  try {
    const keywordRoutings = await storage.getKeywordRoutings();
    
    // Buscar informa√ß√µes das equipes para cada configura√ß√£o
    const routingsWithTeams = await Promise.all(
      keywordRoutings.map(async (routing) => {
        const team = await storage.getTeam(routing.teamId);
        return {
          ...routing,
          teamName: team?.name || 'Equipe n√£o encontrada',
        };
      })
    );
    res.json(routingsWithTeams);
  } catch (error) {
    console.error("Erro ao listar configura√ß√µes:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * GET /api/keyword-routing/:id
 * Busca configura√ß√£o espec√≠fica
 */
router.get("/:id", async (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "ID inv√°lido" });
    }
    const routing = await storage.getKeywordRouting(id);
    if (!routing) {
      return res.status(404).json({ error: "Configura√ß√£o n√£o encontrada" });
    }
    // Buscar informa√ß√µes da equipe
    const team = await storage.getTeam(routing.teamId);
    const routingWithTeam = {
      ...routing,
      teamName: team?.name || 'Equipe n√£o encontrada',
    };
    res.json(routingWithTeam);
  } catch (error) {
    console.error("Erro ao buscar configura√ß√£o:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * POST /api/keyword-routing
 * Cria nova configura√ß√£o
 */
router.post("/", async (req: Request, res: Response) => {
  try {
    const validatedData = insertKeywordRoutingSchema.parse(req.body);
    
    // Verificar se a palavra-chave j√° existe
    const exists = await storage.keywordExists(validatedData.keyword);
    if (exists) {
      return res.status(400).json({ 
        error: "Palavra-chave j√° existe no sistema" 
      });
    }
    // Verificar se a equipe existe
    const team = await storage.getTeam(validatedData.teamId);
    if (!team) {
      return res.status(400).json({ 
        error: "Equipe n√£o encontrada" 
      });
    }
    const newRouting = await storage.createKeywordRouting(validatedData);
    
    // Retornar com informa√ß√µes da equipe
    const routingWithTeam = {
      ...newRouting,
      teamName: team.name,
    };
    res.status(201).json(routingWithTeam);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: "Dados inv√°lidos", 
        details: error.errors 
      });
    }
    
    console.error("Erro ao criar configura√ß√£o:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * PUT /api/keyword-routing/:id
 * Atualiza configura√ß√£o existente
 */
router.put("/:id", async (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "ID inv√°lido" });
    }
    const validatedData = insertKeywordRoutingSchema.partial().parse(req.body);
    
    // Verificar se a configura√ß√£o existe
    const existing = await storage.getKeywordRouting(id);
    if (!existing) {
      return res.status(404).json({ error: "Configura√ß√£o n√£o encontrada" });
    }
    // Se alterando palavra-chave, verificar duplicata
    if (validatedData.keyword && validatedData.keyword !== existing.keyword) {
      const exists = await storage.keywordExists(validatedData.keyword, id);
      if (exists) {
        return res.status(400).json({ 
          error: "Palavra-chave j√° existe no sistema" 
        });
      }
    }
    // Se alterando equipe, verificar se existe
    if (validatedData.teamId) {
      const team = await storage.getTeam(validatedData.teamId);
      if (!team) {
        return res.status(400).json({ 
          error: "Equipe n√£o encontrada" 
        });
      }
    }
    const updatedRouting = await storage.updateKeywordRouting(id, validatedData);
    
    // Buscar informa√ß√µes da equipe
    const team = await storage.getTeam(updatedRouting.teamId);
    const routingWithTeam = {
      ...updatedRouting,
      teamName: team?.name || 'Equipe n√£o encontrada',
    };
    res.json(routingWithTeam);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: "Dados inv√°lidos", 
        details: error.errors 
      });
    }
    
    console.error("Erro ao atualizar configura√ß√£o:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * DELETE /api/keyword-routing/:id
 * Remove configura√ß√£o
 */
router.delete("/:id", async (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "ID inv√°lido" });
    }
    const existing = await storage.getKeywordRouting(id);
    if (!existing) {
      return res.status(404).json({ error: "Configura√ß√£o n√£o encontrada" });
    }
    await storage.deleteKeywordRouting(id);
    res.status(204).send();
  } catch (error) {
    console.error("Erro ao deletar configura√ß√£o:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * POST /api/keyword-routing/find-team
 * Busca equipe baseada na mensagem
 */
router.post("/find-team", async (req: Request, res: Response) => {
  try {
    const { message } = req.body;
    
    if (!message || typeof message !== 'string') {
      return res.status(400).json({ error: "Mensagem √© obrigat√≥ria" });
    }
    const teamId = await storage.findTeamByMessage(message);
    
    if (teamId) {
      const team = await storage.getTeam(teamId);
      res.json({
        found: true,
        teamId,
        teamName: team?.name || 'Equipe n√£o encontrada',
        message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
      });
    } else {
      res.json({
        found: false,
        teamId: null,
        teamName: null,
        message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
      });
    }
  } catch (error) {
    console.error("Erro ao buscar equipe por mensagem:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
/**
 * PATCH /api/keyword-routing/:id/toggle
 * Alterna status ativo/inativo
 */
router.patch("/:id/toggle", async (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "ID inv√°lido" });
    }
    const updatedRouting = await storage.toggleKeywordRoutingStatus(id);
    
    // Buscar informa√ß√µes da equipe
    const team = await storage.getTeam(updatedRouting.teamId);
    const routingWithTeam = {
      ...updatedRouting,
      teamName: team?.name || 'Equipe n√£o encontrada',
    };
    res.json(routingWithTeam);
  } catch (error) {
    console.error("Erro ao alternar status:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});
export { router as keywordRoutingRoutes };
4. Interface Frontend (client/src/pages/Settings/KeywordRoutingPage.tsx)
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Plus, Edit, Trash2, ToggleLeft, ToggleRight, Search, Settings } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/shared/ui/card";
import { Button } from "@/shared/ui/button";
import { Input } from "@/shared/ui/input";
import { Label } from "@/shared/ui/label";
import { Badge } from "@/shared/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/shared/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/shared/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/shared/ui/alert-dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/shared/ui/table";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
interface KeywordRouting {
  id: number;
  keyword: string;
  teamId: number;
  teamName: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}
interface Team {
  id: number;
  name: string;
  teamType: string;
  isActive: boolean;
}
export default function KeywordRoutingPage() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<KeywordRouting | null>(null);
  const [testMessage, setTestMessage] = useState("");
  const [testResult, setTestResult] = useState<any>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  // Queries
  const { data: keywordRoutings = [], isLoading } = useQuery({
    queryKey: ["/api/keyword-routing"],
  });
  const { data: teams = [] } = useQuery<Team[]>({
    queryKey: ["/api/teams"],
  });
  // Mutations
  const createMutation = useMutation({
    mutationFn: (data: { keyword: string; teamId: number }) =>
      apiRequest("POST", "/api/keyword-routing", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/keyword-routing"] });
      setIsCreateDialogOpen(false);
      toast({ title: "Configura√ß√£o criada com sucesso!" });
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao criar configura√ß√£o",
        description: error.message || "Erro desconhecido",
        variant: "destructive",
      });
    },
  });
  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<KeywordRouting> }) =>
      apiRequest("PUT", `/api/keyword-routing/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/keyword-routing"] });
      setIsEditDialogOpen(false);
      setEditingItem(null);
      toast({ title: "Configura√ß√£o atualizada com sucesso!" });
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao atualizar configura√ß√£o",
        description: error.message || "Erro desconhecido",
        variant: "destructive",
      });
    },
  });
  const deleteMutation = useMutation({
    mutationFn: (id: number) => apiRequest("DELETE", `/api/keyword-routing/${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/keyword-routing"] });
      toast({ title: "Configura√ß√£o removida com sucesso!" });
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao remover configura√ß√£o",
        description: error.message || "Erro desconhecido",
        variant: "destructive",
      });
    },
  });
  const toggleMutation = useMutation({
    mutationFn: (id: number) => apiRequest("PATCH", `/api/keyword-routing/${id}/toggle`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/keyword-routing"] });
      toast({ title: "Status alterado com sucesso!" });
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao alterar status",
        description: error.message || "Erro desconhecido",
        variant: "destructive",
      });
    },
  });
  const testMutation = useMutation({
    mutationFn: (message: string) =>
      apiRequest("POST", "/api/keyword-routing/find-team", { message }),
    onSuccess: (result) => {
      setTestResult(result);
      toast({
        title: result.found ? "Palavra-chave encontrada!" : "Nenhuma palavra-chave encontrada",
        description: result.found
          ? `Mensagem ser√° direcionada para: ${result.teamName}`
          : "Esta mensagem n√£o ser√° direcionada automaticamente",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Erro no teste",
        description: error.message || "Erro desconhecido",
        variant: "destructive",
      });
    },
  });
  const handleCreate = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const keyword = formData.get("keyword") as string;
    const teamId = parseInt(formData.get("teamId") as string);
    if (!keyword.trim() || !teamId) {
      toast({
        title: "Campos obrigat√≥rios",
        description: "Preencha todos os campos obrigat√≥rios",
        variant: "destructive",
      });
      return;
    }
    createMutation.mutate({ keyword: keyword.trim(), teamId });
  };
  const handleEdit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!editingItem) return;
    const formData = new FormData(e.currentTarget);
    const keyword = formData.get("keyword") as string;
    const teamId = parseInt(formData.get("teamId") as string);
    if (!keyword.trim() || !teamId) {
      toast({
        title: "Campos obrigat√≥rios",
        description: "Preencha todos os campos obrigat√≥rios",
        variant: "destructive",
      });
      return;
    }
    updateMutation.mutate({
      id: editingItem.id,
      data: { keyword: keyword.trim(), teamId },
    });
  };
  const handleTest = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!testMessage.trim()) {
      toast({
        title: "Mensagem obrigat√≥ria",
        description: "Digite uma mensagem para testar",
        variant: "destructive",
      });
      return;
    }
    testMutation.mutate(testMessage);
  };
  if (isLoading) {
    return (
      <div className="container mx-auto p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="h-64 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }
  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Roteamento por Palavras-chave</h1>
          <p className="text-muted-foreground">
            Configure palavras-chave para direcionar conversas automaticamente para equipes espec√≠ficas
          </p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              Nova Configura√ß√£o
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Criar Nova Configura√ß√£o</DialogTitle>
            </DialogHeader>
            <form onSubmit={handleCreate} className="space-y-4">
              <div>
                <Label htmlFor="keyword">Palavra-chave</Label>
                <Input
                  id="keyword"
                  name="keyword"
                  placeholder="Ex: boleto, certificado, suporte..."
                  required
                />
                <p className="text-sm text-muted-foreground mt-1">
                  A palavra-chave ser√° pesquisada dentro da mensagem (case-insensitive)
                </p>
              </div>
              <div>
                <Label htmlFor="teamId">Equipe de Destino</Label>
                <Select name="teamId" required>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione uma equipe" />
                  </SelectTrigger>
                  <SelectContent>
                    {teams.map((team) => (
                      <SelectItem key={team.id} value={team.id.toString()}>
                        {team.name} ({team.teamType})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="flex justify-end space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsCreateDialogOpen(false)}
                >
                  Cancelar
                </Button>
                <Button type="submit" disabled={createMutation.isPending}>
                  {createMutation.isPending ? "Criando..." : "Criar"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>
      {/* Teste de Mensagem */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="w-5 h-5" />
            Testar Roteamento
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleTest} className="space-y-4">
            <div>
              <Label htmlFor="testMessage">Mensagem de Teste</Label>
              <Input
                id="testMessage"
                value={testMessage}
                onChange={(e) => setTestMessage(e.target.value)}
                placeholder="Digite uma mensagem para testar o roteamento..."
                required
              />
            </div>
            <div className="flex justify-between items-center">
              <Button type="submit" disabled={testMutation.isPending}>
                {testMutation.isPending ? "Testando..." : "Testar Roteamento"}
              </Button>
              {testResult && (
                <div className="flex items-center gap-2">
                  <Badge variant={testResult.found ? "default" : "secondary"}>
                    {testResult.found ? `‚Üí ${testResult.teamName}` : "Sem roteamento"}
                  </Badge>
                </div>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
      {/* Lista de Configura√ß√µes */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            Configura√ß√µes Ativas ({keywordRoutings.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {keywordRoutings.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-muted-foreground">
                Nenhuma configura√ß√£o de palavra-chave criada ainda.
              </p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Palavra-chave</TableHead>
                  <TableHead>Equipe</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Criado em</TableHead>
                  <TableHead className="text-right">A√ß√µes</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {keywordRoutings.map((routing: KeywordRouting) => (
                  <TableRow key={routing.id}>
                    <TableCell className="font-mono">
                      {routing.keyword}
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {routing.teamName}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant={routing.isActive ? "default" : "secondary"}>
                        {routing.isActive ? "Ativo" : "Inativo"}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {new Date(routing.createdAt).toLocaleDateString("pt-BR")}
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end space-x-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleMutation.mutate(routing.id)}
                          disabled={toggleMutation.isPending}
                        >
                          {routing.isActive ? (
                            <ToggleRight className="w-4 h-4" />
                          ) : (
                            <ToggleLeft className="w-4 h-4" />
                          )}
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setEditingItem(routing);
                            setIsEditDialogOpen(true);
                          }}
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Confirmar remo√ß√£o</AlertDialogTitle>
                              <AlertDialogDescription>
                                Tem certeza que deseja remover a palavra-chave "{routing.keyword}"?
                                Esta a√ß√£o n√£o pode ser desfeita.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancelar</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => deleteMutation.mutate(routing.id)}
                              >
                                Remover
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
      {/* Dialog de Edi√ß√£o */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Editar Configura√ß√£o</DialogTitle>
          </DialogHeader>
          {editingItem && (
            <form onSubmit={handleEdit} className="space-y-4">
              <div>
                <Label htmlFor="edit-keyword">Palavra-chave</Label>
                <Input
                  id="edit-keyword"
                  name="keyword"
                  defaultValue={editingItem.keyword}
                  placeholder="Ex: boleto, certificado, suporte..."
                  required
                />
              </div>
              <div>
                <Label htmlFor="edit-teamId">Equipe de Destino</Label>
                <Select name="teamId" defaultValue={editingItem.teamId.toString()} required>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {teams.map((team) => (
                      <SelectItem key={team.id} value={team.id.toString()}>
                        {team.name} ({team.teamType})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="flex justify-end space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsEditDialogOpen(false);
                    setEditingItem(null);
                  }}
                >
                  Cancelar
                </Button>
                <Button type="submit" disabled={updateMutation.isPending}>
                  {updateMutation.isPending ? "Salvando..." : "Salvar"}
                </Button>
              </div>
            </form>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
5. Integra√ß√£o no Storage Principal (server/storage/index.ts)
// Adicionar no in√≠cio do arquivo
import { KeywordRoutingStorage } from "./modules/keywordRoutingStorage";
// Adicionar na classe Storage
export class Storage extends BaseStorage implements IStorage {
  private keywordRoutingModule: KeywordRoutingStorage;
  constructor() {
    super();
    // ... outras inicializa√ß√µes
    this.keywordRoutingModule = new KeywordRoutingStorage();
  }
  // M√©todos para keyword routing
  async getKeywordRoutings() {
    return this.keywordRoutingModule.getKeywordRoutings();
  }
  async getKeywordRouting(id: number) {
    return this.keywordRoutingModule.getKeywordRouting(id);
  }
  async createKeywordRouting(data: InsertKeywordRouting) {
    return this.keywordRoutingModule.createKeywordRouting(data);
  }
  async updateKeywordRouting(id: number, data: Partial<InsertKeywordRouting>) {
    return this.keywordRoutingModule.updateKeywordRouting(id, data);
  }
  async deleteKeywordRouting(id: number) {
    return this.keywordRoutingModule.deleteKeywordRouting(id);
  }
  async findTeamByMessage(message: string) {
    return this.keywordRoutingModule.findTeamByMessage(message);
  }
  async keywordExists(keyword: string, excludeId?: number) {
    return this.keywordRoutingModule.keywordExists(keyword, excludeId);
  }
  async toggleKeywordRoutingStatus(id: number) {
    return this.keywordRoutingModule.toggleKeywordRoutingStatus(id);
  }
  async getKeywordRoutingsByTeam(teamId: number) {
    return this.keywordRoutingModule.getKeywordRoutingsByTeam(teamId);
  }
}
6. Integra√ß√£o nos Webhooks (exemplo para Z-API)
// Em server/routes/webhooks/zapi.ts ou similar
async function processWebhookMessage(messageData: any) {
  try {
    const message = messageData.text?.message || '';
    
    // Verificar se existe roteamento por palavra-chave
    const teamId = await storage.findTeamByMessage(message);
    
    if (teamId) {
      console.log(`üéØ Roteamento autom√°tico: mensagem direcionada para equipe ${teamId}`);
      
      // Atribuir conversa √† equipe
      if (conversation) {
        await storage.assignConversationToTeam(conversation.id, teamId, 'automatic');
      }
    } else {
      console.log('üìù Nenhum roteamento encontrado para a mensagem');
    }
    
    // Continuar processamento normal...
  } catch (error) {
    console.error('Erro no roteamento por palavra-chave:', error);
  }
}
Este sistema completo permite:

Configurar palavras-chave que direcionam conversas para equipes espec√≠ficas
Interface administrativa para gerenciar as configura√ß√µes
Teste em tempo real do roteamento
Integra√ß√£o autom√°tica nos webhooks
Valida√ß√µes para evitar duplicatas
Toggle de status para ativar/desativar regras
Hist√≥rico de cria√ß√£o e modifica√ß√£o
O sistema √© robusto, type-safe e integrado com toda a arquitetura existente do EduChat.