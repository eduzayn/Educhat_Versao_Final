Tarefa para o Replit: Expans√£o e Integra√ß√£o do Sistema de Permiss√µes ‚Äì EduChat
üéØ Objetivo
Aprimorar o sistema atual de autentica√ß√£o, fun√ß√µes e permiss√µes, elevando-o para um modelo h√≠brido RBAC/ABAC, com controle multicanal, integra√ß√£o com macrosetores, roteamento inteligente e hierarquia baseada em escopo organizacional.

üß© BASE EXISTENTE (resumo do que j√° temos)
Autentica√ß√£o com Passport.js, hash scrypt + salt, cookies persistentes via express-session

Tabelas: users (legado) e system_users (principal)

Fun√ß√µes: admin, manager, agent, supervisor, viewer

Permiss√µes b√°sicas por fun√ß√£o

Macrosetores e Equipes ativas:

Comercial, Suporte, Tutoria, Secretaria, Secretaria P√≥s, Financeiro, Cobran√ßa

Roteamento inteligente por an√°lise de mensagem + canal de origem

Interface de gest√£o com CRUDs, filtros e templates

üõ†Ô∏è Tarefa T√©cnica para Expandir e Integrar:
1. Unifica√ß√£o e refatora√ß√£o de tabelas de usu√°rio
Consolidar users e system_users em uma estrutura √∫nica, com controle de status (ativo, inativo, bloqueado)

Garantir compatibilidade com senhas hash e texto plano (fase de transi√ß√£o)

2. Reestrutura√ß√£o do sistema de permiss√µes
Criar novas tabelas:

permissions: (ex: conversa:atribuir, relatorio:ver, canal:editar)

roles_permissions: liga√ß√£o entre pap√©is e permiss√µes

custom_rules: para regras condicionais (ABAC)

3. Permiss√µes por canal e macrosetor
Usu√°rios devem ter permiss√µes condicionadas a:

Canal: WhatsApp, Instagram, Facebook, etc.

Macrosetor: suporte, comercial, financeiro, etc.

Ex: um atendente pode responder apenas mensagens de canais do macrosetor ao qual est√° vinculado

4. Roteamento inteligente aprimorado
O sistema j√° detecta setor por palavras-chave

Expandir para tamb√©m capturar e vincular:

Canal

Curso mencionado (via NLP leve)

Finalidade da conversa (suporte, matr√≠cula, cobran√ßa etc.)

5. Gerador de Permiss√µes e Templates
Criar um painel onde seja poss√≠vel:

Criar novos pap√©is

Selecionar permiss√µes por recurso e a√ß√£o

Filtrar permiss√µes por macrosetor

Criar templates de permiss√£o (por tipo de empresa, opera√ß√£o ou canal)

6. Filtro por escopo organizacional (DataKey)
Adicionar campo dataKey a todas as entidades (ex: zayn.piracema.tutoria)

Toda consulta de dados deve aplicar filtro dataKey.startsWith(user.dataKey) para respeitar hierarquia

7. Log de auditoria de a√ß√µes sens√≠veis
Criar tabela audit_logs com:

userId, canal, a√ß√£o, resultado, IP, dataKey, timestamp

Todas as a√ß√µes de administra√ß√£o, reatribui√ß√£o de conversa, login e edi√ß√£o de permiss√µes devem ser rastreadas

8. Auto logout por inatividade
Implementar sistema de logout autom√°tico ap√≥s 10 min de inatividade (mouse/teclado)

A contagem de tempo de atividade do operador s√≥ deve ser retomada ap√≥s novo login

9. Interface adaptada por permiss√£o
Se o usu√°rio n√£o tiver permiss√£o, a funcionalidade correspondente deve:

Ser oculta na interface

Ou exibir mensagem clara de acesso negado

üìã Instru√ß√µes finais para o time:
O objetivo √© garantir um sistema de permiss√µes profissional, seguro e escal√°vel, capaz de:

Suportar m√∫ltiplas institui√ß√µes (white label)

Permitir granularidade de acesso por canal, macrosetor e escopo

Trazer intelig√™ncia de roteamento automatizada e ajust√°vel

Rastrear todas as a√ß√µes relevantes dos usu√°rios

Melhorar a governan√ßa e a performance operacional do sistema

Favor garantir que a nova estrutura de permiss√µes funcione com a arquitetura existente de login, macrosetores e canais j√° implementados.