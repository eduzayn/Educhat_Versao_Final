import { memo, useMemo } from 'react';
import { Check, CheckCheck } from 'lucide-react';
import { Avatar, AvatarImage, AvatarFallback } from '@/shared/ui/ui/avatar';
import { format } from 'date-fns';
import type { Message, Contact } from '@shared/schema';

interface MessageBubbleProps {
  message: Message;
  contact: Contact;
  channelIcon?: string;
  channelColor?: string;
  conversationId?: number;
}

// Função auxiliar para formatar o horário
const formatTime = (timestamp: Date | string | number) =>
  format(new Date(timestamp), 'HH:mm');

export const MessageBubbleOptimized = memo(function MessageBubble({
  message,
  contact,
  channelIcon,
  channelColor,
  conversationId,
}: MessageBubbleProps) {
  const isFromContact = message.isFromContact;

  const messageTimestamp = message.deliveredAt || message.sentAt || new Date();

  const messageTime = useMemo(() => formatTime(messageTimestamp), [messageTimestamp]);

  const messageStatus = useMemo(() => {
    if (isFromContact) return null;

    if (message.readAt) {
      return <CheckCheck className="w-3 h-3 text-blue-500" />;
    } else if (message.deliveredAt) {
      return <CheckCheck className="w-3 h-3 text-gray-400" />;
    } else {
      return <Check className="w-3 h-3 text-gray-400" />;
    }
  }, [isFromContact, message.readAt, message.deliveredAt]);

  const avatarFallbackChar = isFromContact
    ? contact.name?.charAt(0)?.toUpperCase() || 'C'
    : 'A';

  const bubbleClasses = isFromContact
    ? 'bg-gray-100 text-gray-900'
    : 'bg-blue-600 text-white';

  const timeClasses = isFromContact
    ? 'text-xs text-gray-400'
    : 'text-xs text-gray-500 justify-end';

  const containerClasses = `flex items-start gap-3 mb-4 ${isFromContact ? '' : 'flex-row-reverse'}`;

  const bubbleWrapperClasses = `flex-1 max-w-md ${isFromContact ? '' : 'flex flex-col items-end'}`;

  // Mensagem deletada
  if (message.isDeleted) {
    return (
      <div className={containerClasses}>
        <Avatar className="w-8 h-8 flex-shrink-0 opacity-50">
          <AvatarImage
            src={isFromContact ? contact.profileImageUrl || '' : ''}
            alt={isFromContact ? contact.name : 'Agente'}
          />
          <AvatarFallback className="text-xs">{avatarFallbackChar}</AvatarFallback>
        </Avatar>

        <div className={bubbleWrapperClasses}>
          <div className="px-4 py-2 rounded-lg bg-gray-100 text-gray-500 opacity-75">
            <span className="text-sm italic">Esta mensagem foi deletada</span>
          </div>
          <div className={`flex items-center gap-1 mt-1 ${timeClasses}`}>
            <span title={new Date(messageTimestamp).toLocaleString()}>{messageTime}</span>
          </div>
        </div>
      </div>
    );
  }

  // Mensagem normal
  return (
    <div className={containerClasses}>
      <Avatar className="w-8 h-8 flex-shrink-0">
        <AvatarImage
          src={isFromContact ? contact.profileImageUrl || '' : ''}
          alt={isFromContact ? contact.name : 'Agente'}
        />
        <AvatarFallback className="text-xs">{avatarFallbackChar}</AvatarFallback>
      </Avatar>

      <div className={bubbleWrapperClasses}>
        <div className={`px-4 py-2 rounded-lg ${bubbleClasses}`}>
          <p className="text-sm">{message.content}</p>
        </div>

        <div className={`flex items-center gap-1 mt-1 ${timeClasses}`}>
          {messageStatus}
          <span title={new Date(messageTimestamp).toLocaleString()}>{messageTime}</span>
        </div>
      </div>
    </div>
  );
});
