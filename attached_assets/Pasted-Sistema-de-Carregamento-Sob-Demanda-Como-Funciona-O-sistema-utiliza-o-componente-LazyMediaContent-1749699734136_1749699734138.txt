Sistema de Carregamento Sob Demanda
Como Funciona:
O sistema utiliza o componente LazyMediaContent.tsx que implementa um carregamento lazy (sob demanda) para economizar recursos e melhorar a performance.
📋 Estados do Carregamento:

Estado Inicial (Não Carregado)
Imagens: Mostra um placeholder com ícone + botão "Ver imagem"
Vídeos: Mostra um placeholder com ícone + botão "Reproduzir"
Documentos: Mostra nome do arquivo + botão "Carregar"
Áudios: Mostra duração + botão "Reproduzir"
Estado de Carregamento
Botão fica desabilitado com texto "Carregando..."
Faz requisição para /api/messages/${messageId}/media
Estado Carregado
Imagens: Exibe a imagem completa + clique para abrir em nova aba
Vídeos: Exibe player de vídeo com controles
Documentos: Botão "Baixar" para download
Áudios: Player de áudio com controles
Implementação Técnica:
const [content, setContent] = useState<string | null>(initialContent || null);
const [loading, setLoading] = useState(false);
const [loaded, setLoaded] = useState(!!initialContent);
const loadMediaContent = async () => {
if (loaded || loading) return;

setLoading(true);
try {
const response = await fetch(/api/messages/${messageId}/media);
if (response.ok) {
const data = await response.json();
setContent(data.content);
setLoaded(true);
}
} finally {
setLoading(false);
}
};

Interface Visual:
Antes do carregamento:
[📷] Imagem: foto.jpg [Ver imagem]
[▶️] Vídeo: video.mp4 [Reproduzir]
[📄] Documento: arquivo.pdf [Carregar]
Após o carregamento:
[Imagem completa exibida]
[Player de vídeo com controles]
[📄] Documento: arquivo.pdf [Baixar]

✅ Vantagens do Sistema:
Performance: Não carrega todas as mídias automaticamente
Economia de dados: Usuário escolhe o que quer ver
UX melhorada: Interface responsiva e rápida
Controle: Usuário tem controle sobre o que carrega
Logs seguros: Sistema de logging para debug
🔄 Fluxo de Uso:
Mensagem chega → Mostra placeholder
Usuário clica → Inicia carregamento
API responde → Exibe conteúdo real
Conteúdo fica cached → Não recarrega novamente
Esse sistema é especialmente útil em conversas com muitas imagens/vídeos, evitando sobrecarregar a interface e a conexão do usuário!

Analise os arquivos do sitema para ver se esse sistema está corretmente implantado.