// Delete message via Z-API - REST: DELETE /api/zapi/messages/:messageId
app.delete('/api/zapi/messages/:messageId', async (req, res) => {
  try {
    console.log('üóëÔ∏è Recebendo solicita√ß√£o de exclus√£o de mensagem:', req.body);
    
    const { phone, conversationId } = req.body;
    const messageId = req.params.messageId;
    
    if (!phone || !messageId) {
      return res.status(400).json({ 
        error: 'Phone e messageId s√£o obrigat√≥rios' 
      });
    }

    const credentials = validateZApiCredentials();
    if (!credentials.valid) {
      return res.status(400).json({ error: credentials.error });
    }

    const { instanceId, token, clientToken } = credentials;
    const cleanPhone = phone.replace(/\D/g, '');
    
    const url = `https://api.z-api.io/instances/${instanceId}/token/${token}/messages?phone=${cleanPhone}&messageId=${messageId.toString()}&owner=true`;
    
    console.log('üóëÔ∏è Deletando mensagem via Z-API:', { 
      url,
      conversationId 
    });

    const response = await fetch(url, {
      method: 'DELETE',
      headers: {
        'Client-Token': clientToken || ''
      }
    });

    const responseText = await response.text();
    console.log('üì• Resposta Z-API exclus√£o de mensagem:', { 
      status: response.status, 
      statusText: response.statusText,
      body: responseText 
    });

    if (!response.ok) {
      console.error('‚ùå Erro na Z-API:', {
        status: response.status,
        statusText: response.statusText,
        body: responseText
      });
      
      let errorMessage = 'Erro ao deletar mensagem via Z-API';
      if (response.status === 404) {
        errorMessage = 'Mensagem n√£o encontrada ou j√° foi deletada';
      } else if (response.status === 400) {
        errorMessage = 'Dados inv√°lidos para deletar mensagem';
      } else if (response.status === 401 || response.status === 403) {
        errorMessage = 'Credenciais Z-API inv√°lidas ou sem permiss√£o';
      }
      
      return res.status(response.status).json({ 
        error: errorMessage,
        details: responseText
      });
    }

    let data;
    try {
      data = responseText ? JSON.parse(responseText) : { success: true };
    } catch (parseError) {
      console.log('‚ö†Ô∏è Resposta n√£o √© JSON v√°lido, tratando como sucesso:', responseText);
      data = { success: true, rawResponse: responseText };
    }

    // Se a exclus√£o foi bem-sucedida, marcar mensagem como deletada no banco
    if (conversationId) {
      const messages = await storage.getMessages(parseInt(conversationId));
      const messageToDelete = messages.find(msg => {
        const metadata = msg.metadata && typeof msg.metadata === 'object' ? msg.metadata : {};
        const msgId = 'messageId' in metadata ? metadata.messageId : 
                     'zaapId' in metadata ? metadata.zaapId : 
                     'id' in metadata ? metadata.id : null;
        return msgId === messageId.toString();
      });

      if (messageToDelete) {
        await storage.markMessageAsDeleted(messageToDelete.id);
      }

      const { broadcast } = await import('../realtime');
      broadcast(parseInt(conversationId), {
        type: 'message_deleted',
        messageId: messageId.toString(),
        deletedAt: new Date().toISOString(),
        conversationId: parseInt(conversationId)
      });
    }

    console.log('‚úÖ Mensagem deletada com sucesso via Z-API:', data);
    
    res.json({
      success: true,
      messageId: messageId.toString(),
      deletedAt: new Date().toISOString(),
      ...data
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao deletar mensagem:', error);
    res.status(500).json({ 
      error: error instanceof Error ? error.message : 'Erro interno do servidor' 
    });
  }
});