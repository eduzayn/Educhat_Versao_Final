/**
 * Integra√ß√£o da gamifica√ß√£o com eventos do sistema
 * Atualiza estat√≠sticas automaticamente quando eventos importantes ocorrem
 */

import { gamificationService } from './gamificationService';

export class GamificationWebhookIntegration {
  
  /**
   * Processa evento de atribui√ß√£o de conversa
   */
  static async onConversationAssigned(userId: number, conversationId: number): Promise<void> {
    try {
      console.log(`üéÆ [Gamifica√ß√£o] Processando atribui√ß√£o: usu√°rio ${userId}, conversa ${conversationId}`);
      
      const now = new Date();
      await Promise.all([
        gamificationService.updateUserStats(userId, 'daily', now),
        gamificationService.updateUserStats(userId, 'weekly', now),
        gamificationService.updateUserStats(userId, 'monthly', now)
      ]);
      
      console.log(`‚úÖ [Gamifica√ß√£o] Estat√≠sticas atualizadas para usu√°rio ${userId}`);
    } catch (error) {
      console.error(`‚ùå [Gamifica√ß√£o] Erro ao processar atribui√ß√£o:`, error);
    }
  }

  /**
   * Processa evento de fechamento de conversa
   */
  static async onConversationClosed(userId: number, conversationId: number): Promise<void> {
    try {
      console.log(`üéÆ [Gamifica√ß√£o] Processando fechamento: usu√°rio ${userId}, conversa ${conversationId}`);
      
      const now = new Date();
      await Promise.all([
        gamificationService.updateUserStats(userId, 'daily', now),
        gamificationService.updateUserStats(userId, 'weekly', now),
        gamificationService.updateUserStats(userId, 'monthly', now)
      ]);
      
      console.log(`‚úÖ [Gamifica√ß√£o] Estat√≠sticas de fechamento atualizadas para usu√°rio ${userId}`);
    } catch (error) {
      console.error(`‚ùå [Gamifica√ß√£o] Erro ao processar fechamento:`, error);
    }
  }

  /**
   * Processa evento de transfer√™ncia/handoff
   */
  static async onHandoffCompleted(fromUserId: number | null, toUserId: number, conversationId: number): Promise<void> {
    try {
      console.log(`üéÆ [Gamifica√ß√£o] Processando handoff: de ${fromUserId} para ${toUserId}, conversa ${conversationId}`);
      
      const now = new Date();
      
      // Atualizar estat√≠sticas do usu√°rio que recebeu a conversa
      await Promise.all([
        gamificationService.updateUserStats(toUserId, 'daily', now),
        gamificationService.updateUserStats(toUserId, 'weekly', now),
        gamificationService.updateUserStats(toUserId, 'monthly', now)
      ]);
      
      console.log(`‚úÖ [Gamifica√ß√£o] Estat√≠sticas de handoff atualizadas para usu√°rio ${toUserId}`);
    } catch (error) {
      console.error(`‚ùå [Gamifica√ß√£o] Erro ao processar handoff:`, error);
    }
  }

  /**
   * Processa evento de envio de mensagem
   */
  static async onMessageSent(userId: number, conversationId: number): Promise<void> {
    try {
      // Atualizar apenas estat√≠sticas di√°rias para performance
      await gamificationService.updateUserStats(userId, 'daily', new Date());
    } catch (error) {
      console.error(`‚ùå [Gamifica√ß√£o] Erro ao processar mensagem:`, error);
    }
  }

  /**
   * For√ßa atualiza√ß√£o completa das estat√≠sticas de um usu√°rio
   */
  static async forceUserStatsUpdate(userId: number): Promise<void> {
    try {
      console.log(`üéÆ [Gamifica√ß√£o] For√ßando atualiza√ß√£o completa para usu√°rio ${userId}`);
      
      const now = new Date();
      await Promise.all([
        gamificationService.updateUserStats(userId, 'daily', now),
        gamificationService.updateUserStats(userId, 'weekly', now),
        gamificationService.updateUserStats(userId, 'monthly', now)
      ]);
      
      console.log(`‚úÖ [Gamifica√ß√£o] Atualiza√ß√£o completa conclu√≠da para usu√°rio ${userId}`);
    } catch (error) {
      console.error(`‚ùå [Gamifica√ß√£o] Erro na atualiza√ß√£o completa:`, error);
    }
  }
}

export const gamificationWebhook = GamificationWebhookIntegration;