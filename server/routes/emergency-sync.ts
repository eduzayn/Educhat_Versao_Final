/**
 * CORRE√á√ÉO CR√çTICA EM PRODU√á√ÉO
 * Endpoint de emerg√™ncia para for√ßar sincroniza√ß√£o de conversas
 */

import type { Express, Request, Response } from "express";
import { storage } from "../storage/index";

export function registerEmergencySyncRoutes(app: Express) {
  
  // Endpoint de emerg√™ncia para for√ßar sincroniza√ß√£o
  app.post('/api/emergency-sync', async (req: Request, res: Response) => {
    try {
      console.log('üö® EMERG√äNCIA: For√ßando sincroniza√ß√£o de conversas');
      
      // Importar WebSocket broadcast
      const { broadcastToAll } = await import('./realtime');
      
      // Buscar conversas com mensagens recentes
      const recentConversations = await storage.getConversations(50, 0);
      
      console.log(`üìä Encontradas ${recentConversations.length} conversas para sincronizar`);
      
      // For√ßar broadcast de todas as conversas
      broadcastToAll({
        type: 'force_conversation_refresh',
        action: 'emergency_sync',
        timestamp: new Date().toISOString(),
        conversationCount: recentConversations.length
      });
      
      // Aguardar um momento para garantir entrega
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Segundo broadcast para garantir
      broadcastToAll({
        type: 'conversation_list_update',
        action: 'force_refresh',
        timestamp: new Date().toISOString()
      });
      
      console.log('‚úÖ EMERG√äNCIA: Sincroniza√ß√£o for√ßada enviada via WebSocket');
      
      res.json({
        success: true,
        message: 'Sincroniza√ß√£o de emerg√™ncia executada',
        conversationsFound: recentConversations.length,
        timestamp: new Date().toISOString()
      });
      
    } catch (error: any) {
      console.error('‚ùå EMERG√äNCIA: Erro na sincroniza√ß√£o for√ßada:', error);
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });
}