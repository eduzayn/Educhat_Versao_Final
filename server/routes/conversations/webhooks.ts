/**
 * Webhooks espec√≠ficos para conversas - Integra√ß√£o com Gamifica√ß√£o
 * Garante que todas as a√ß√µes de conversa atualizem as estat√≠sticas em tempo real
 */

import { Router } from 'express';
import { gamificationWebhook } from '../../services/gamificationWebhookIntegration';
import { db } from '../../db';
import { conversations } from '@shared/schema';
import { eq } from 'drizzle-orm';

const router = Router();

/**
 * POST /api/conversations/webhook/assigned
 * Webhook interno para quando uma conversa √© atribu√≠da
 */
router.post('/webhook/assigned', async (req, res) => {
  try {
    const { conversationId, userId } = req.body;

    if (!conversationId || !userId) {
      return res.status(400).json({ 
        error: 'conversationId e userId s√£o obrigat√≥rios' 
      });
    }

    // Verificar se a conversa existe
    const conversation = await db
      .select()
      .from(conversations)
      .where(eq(conversations.id, conversationId))
      .limit(1);

    if (conversation.length === 0) {
      return res.status(404).json({ 
        error: 'Conversa n√£o encontrada' 
      });
    }

    // Atualizar gamifica√ß√£o
    await gamificationWebhook.onConversationAssigned(userId, conversationId);

    console.log(`üéÆ Webhook de atribui√ß√£o processado: usu√°rio ${userId}, conversa ${conversationId}`);

    res.json({
      success: true,
      message: 'Gamifica√ß√£o atualizada com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro no webhook de atribui√ß√£o:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

/**
 * POST /api/conversations/webhook/closed
 * Webhook interno para quando uma conversa √© fechada
 */
router.post('/webhook/closed', async (req, res) => {
  try {
    const { conversationId, userId } = req.body;

    if (!conversationId || !userId) {
      return res.status(400).json({ 
        error: 'conversationId e userId s√£o obrigat√≥rios' 
      });
    }

    // Atualizar gamifica√ß√£o
    await gamificationWebhook.onConversationClosed(userId, conversationId);

    console.log(`üéÆ Webhook de fechamento processado: usu√°rio ${userId}, conversa ${conversationId}`);

    res.json({
      success: true,
      message: 'Gamifica√ß√£o atualizada com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro no webhook de fechamento:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

/**
 * POST /api/conversations/webhook/message-sent
 * Webhook interno para quando uma mensagem √© enviada
 */
router.post('/webhook/message-sent', async (req, res) => {
  try {
    const { conversationId, userId } = req.body;

    if (!conversationId || !userId) {
      return res.status(400).json({ 
        error: 'conversationId e userId s√£o obrigat√≥rios' 
      });
    }

    // Atualizar gamifica√ß√£o (apenas estat√≠sticas di√°rias para performance)
    await gamificationWebhook.onMessageSent(userId, conversationId);

    res.json({
      success: true,
      message: 'Gamifica√ß√£o atualizada com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro no webhook de mensagem:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

export default router;