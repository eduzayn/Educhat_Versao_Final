/**
 * Script de teste para verificar integra√ß√£o completa da gamifica√ß√£o
 * Testa round-robin com atualiza√ß√£o em tempo real das estat√≠sticas
 */

import { db } from './db.js';
import { gamificationService } from './services/gamificationService.js';
import { equitableRoundRobinService } from './services/equitableRoundRobinService.js';
import { gamificationWebhook } from './services/gamificationWebhookIntegration.js';

async function testGamificationIntegration() {
  try {
    console.log('üéÆ Testando integra√ß√£o completa da gamifica√ß√£o com transfer√™ncias...\n');

    // 1. Buscar usu√°rio de teste
    const testUser = await db.query('SELECT id FROM system_users WHERE email = $1 LIMIT 1', ['admin@educhat.com']);
    if (testUser.rows.length === 0) {
      console.log('‚ùå Usu√°rio de teste n√£o encontrado');
      return;
    }
    const userId = testUser.rows[0].id;
    console.log(`üë§ Usu√°rio de teste: ID ${userId}`);

    // 2. Buscar equipe de teste
    const testTeam = await db.query('SELECT id FROM teams WHERE is_active = true LIMIT 1');
    if (testTeam.rows.length === 0) {
      console.log('‚ùå Equipe de teste n√£o encontrada');
      return;
    }
    const teamId = testTeam.rows[0].id;
    console.log(`üë• Equipe de teste: ID ${teamId}`);

    // 3. Criar conversa de teste
    const testConversation = await db.query(`
      INSERT INTO conversations (contact_id, channel, status, team_type, created_at)
      VALUES (1, 'whatsapp', 'open', 'suporte', NOW())
      RETURNING id
    `);
    const conversationId = testConversation.rows[0].id;
    console.log(`üí¨ Conversa de teste criada: ID ${conversationId}`);

    // 4. Testar estat√≠sticas antes da atribui√ß√£o
    console.log('\nüìä Estat√≠sticas antes da atribui√ß√£o:');
    const statsBefore = await gamificationService.getUserStats(userId, 'daily');
    console.log(`- Conversas atribu√≠das: ${statsBefore?.conversationsAssigned || 0}`);
    console.log(`- Pontos totais: ${statsBefore?.totalPoints || 0}`);

    // 5. Executar round-robin com integra√ß√£o de gamifica√ß√£o
    console.log('\nüéØ Executando round-robin...');
    const result = await equitableRoundRobinService.assignUserToConversation(conversationId, teamId);
    
    if (result.success && result.userId) {
      console.log(`‚úÖ Atribui√ß√£o bem-sucedida para usu√°rio ${result.userId}`);
      
      // Simular webhook de gamifica√ß√£o
      await gamificationWebhook.onConversationAssigned(result.userId, conversationId);
      console.log('üéÆ Webhook de gamifica√ß√£o executado');
    } else {
      console.log(`‚ùå Falha na atribui√ß√£o: ${result.reason}`);
      return;
    }

    // 6. Verificar estat√≠sticas ap√≥s a atribui√ß√£o
    console.log('\nüìä Estat√≠sticas ap√≥s a atribui√ß√£o:');
    const statsAfter = await gamificationService.getUserStats(userId, 'daily');
    console.log(`- Conversas atribu√≠das: ${statsAfter?.conversationsAssigned || 0}`);
    console.log(`- Pontos totais: ${statsAfter?.totalPoints || 0}`);

    // 7. Testar badges do usu√°rio
    console.log('\nüèÜ Badges do usu√°rio:');
    const badges = await gamificationService.getUserBadges(userId);
    badges.slice(0, 3).forEach(badge => {
      console.log(`- ${badge.name}: ${badge.progress}/${badge.maxProgress} (${badge.isEarned ? 'CONQUISTADO' : 'EM PROGRESSO'})`);
    });

    // 8. Testar leaderboard
    console.log('\nüèÖ Top 3 do ranking di√°rio:');
    const leaderboard = await gamificationService.getLeaderboard('total_points', 'daily', undefined, 3);
    leaderboard.forEach((entry, index) => {
      console.log(`${index + 1}. ${entry.userName}: ${entry.points} pontos`);
    });

    // 9. Simular fechamento da conversa
    console.log('\nüîÑ Simulando fechamento da conversa...');
    await db.query('UPDATE conversations SET status = $1 WHERE id = $2', ['closed', conversationId]);
    await gamificationWebhook.onConversationClosed(userId, conversationId);
    console.log('‚úÖ Webhook de fechamento executado');

    // 10. Verificar estat√≠sticas finais
    console.log('\nüìä Estat√≠sticas finais:');
    const statsFinal = await gamificationService.getUserStats(userId, 'daily');
    console.log(`- Conversas atribu√≠das: ${statsFinal?.conversationsAssigned || 0}`);
    console.log(`- Conversas fechadas: ${statsFinal?.conversationsClosed || 0}`);
    console.log(`- Pontos totais: ${statsFinal?.totalPoints || 0}`);

    // Limpeza
    await db.query('DELETE FROM conversations WHERE id = $1', [conversationId]);
    console.log('\nüßπ Conversa de teste removida');

    console.log('\n‚úÖ Teste de integra√ß√£o da gamifica√ß√£o conclu√≠do com sucesso!');
    console.log('üéÆ Sistema de gamifica√ß√£o est√° 100% integrado com transfer√™ncias em tempo real');

  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error);
  } finally {
    process.exit(0);
  }
}

testGamificationIntegration();