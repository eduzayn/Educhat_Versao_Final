// Teste para verificar distribui√ß√£o em rod√≠zio fora do hor√°rio comercial
const { IntelligentHandoffService } = require('./services/intelligentHandoffService');

async function testRoundRobinDistribution() {
  console.log('üß™ Testando distribui√ß√£o em rod√≠zio fora do hor√°rio comercial...');
  
  const handoffService = new IntelligentHandoffService();
  
  // Simular situa√ß√£o fora do hor√°rio comercial
  const originalIsBusinessHours = handoffService.isBusinessHours;
  handoffService.isBusinessHours = () => false; // For√ßar fora do hor√°rio
  
  try {
    // Buscar equipe da Prof Ana (ID 9 - Prof Ana)
    const profAnaTeamId = 9;
    
    console.log('üîç Buscando usu√°rios da equipe Prof Ana...');
    const recommendation = await handoffService.recommendHandoff(1561, 'overflow');
    
    console.log('üìä Recomenda√ß√£o gerada:', {
      teamId: recommendation.teamId,
      teamName: recommendation.teamName,
      userId: recommendation.userId,
      username: recommendation.username,
      reason: recommendation.reason
    });
    
    if (recommendation.teamId === profAnaTeamId) {
      console.log('‚úÖ Sistema est√° funcionando: Prof Ana recebeu a recomenda√ß√£o');
      console.log('üéØ Distribui√ß√£o em rod√≠zio ativa para hor√°rio n√£o comercial');
    } else {
      console.log('‚ö†Ô∏è Recomenda√ß√£o foi para outra equipe:', recommendation.teamName);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    // Restaurar fun√ß√£o original
    handoffService.isBusinessHours = originalIsBusinessHours;
  }
}

// Executar teste
testRoundRobinDistribution();