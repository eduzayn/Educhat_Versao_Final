import { useState } from "react";
import { Button } from "@/shared/ui/ui/button";
import { Popover, PopoverContent, PopoverTrigger } from "@/shared/ui/ui/popover";
import { cn } from "@/lib/utils";
import { Smile, X } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import type { Message } from "@shared/schema";

interface MessageReactionsProps {
  message: Message;
  conversationId: number;
  contactPhone: string;
}

// Conjunto robusto de rea√ß√µes organizadas por categorias
const REACTION_CATEGORIES = {
  emotions: {
    label: "Emo√ß√µes",
    reactions: ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá", "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö", "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü•∏", "ü§©", "ü•≥"]
  },
  feelings: {
    label: "Sentimentos", 
    reactions: ["üò•", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨", "ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±"]
  },
  gestures: {
    label: "Gestos",
    reactions: ["üëç", "üëé", "üëå", "‚úåÔ∏è", "ü§û", "ü§ü", "ü§ò", "ü§ô", "üëà", "üëâ", "üëÜ", "üñï", "üëá", "‚òùÔ∏è", "üëã", "ü§ö", "üñêÔ∏è", "‚úã", "üññ", "üëè", "üôå", "ü§≤", "ü§ù", "üôè", "‚úçÔ∏è", "üí™", "ü¶æ", "ü¶ø", "ü¶µ", "ü¶∂", "üëÇ", "ü¶ª"]
  },
  hearts: {
    label: "Cora√ß√µes",
    reactions: ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî", "‚ù£Ô∏è", "üíï", "üíû", "üíì", "üíó", "üíñ", "üíò", "üíù", "üíü", "‚ô•Ô∏è", "üíã", "üíå", "üíê", "üåπ", "üå∫", "üåª", "üå∑", "üå∏", "üíí", "üíç", "üíé", "üî•"]
  },
  objects: {
    label: "Objetos",
    reactions: ["üéâ", "üéä", "üéà", "üéÅ", "üéÄ", "üéÇ", "üç∞", "üßÅ", "üç≠", "üç¨", "üç´", "üçø", "üç©", "üç™", "‚òï", "üç∫", "üçª", "ü•Ç", "üç∑", "ü•É", "üç∏", "üçπ", "üçæ", "üéµ", "üé∂", "üé§", "üéß", "üì±", "üíª", "‚åö", "üì∑", "üì∫"]
  },
  nature: {
    label: "Natureza",
    reactions: ["üåü", "‚≠ê", "‚ú®", "‚ö°", "‚òÄÔ∏è", "üåû", "üåù", "üåõ", "üåú", "üåö", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåô", "‚òÅÔ∏è", "‚õÖ", "‚õàÔ∏è", "üå§Ô∏è", "üå¶Ô∏è", "üåßÔ∏è", "‚õÜ", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑ", "üåä", "üíß", "‚òî"]
  }
};

const ALL_REACTIONS = Object.values(REACTION_CATEGORIES).flatMap(category => category.reactions);

export function MessageReactions({ message, conversationId, contactPhone }: MessageReactionsProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [activeCategory, setActiveCategory] = useState("emotions");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Mutation para enviar rea√ß√£o
  const sendReactionMutation = useMutation({
    mutationFn: async ({ reaction }: { reaction: string }) => {
      console.log("üì§ Enviando rea√ß√£o via Z-API:", { 
        phone: contactPhone, 
        messageId: message.id, 
        reaction 
      });

      const response = await apiRequest("/api/zapi/send-reaction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          phone: contactPhone,
          messageId: message.id.toString(),
          reaction
        })
      });

      return response;
    },
    onSuccess: (data) => {
      console.log("‚úÖ Rea√ß√£o enviada via Z-API:", data);
      toast({
        title: "Rea√ß√£o enviada",
        description: "Sua rea√ß√£o foi enviada com sucesso!",
      });
      setIsOpen(false);
      // Invalidar cache para atualizar a conversa
      queryClient.invalidateQueries({ queryKey: ["/api/conversations", conversationId, "messages"] });
    },
    onError: (error) => {
      console.error("‚ùå Erro ao enviar rea√ß√£o:", error);
      toast({
        title: "Erro ao enviar rea√ß√£o",
        description: "N√£o foi poss√≠vel enviar a rea√ß√£o. Tente novamente.",
        variant: "destructive",
      });
    }
  });

  // Mutation para remover rea√ß√£o
  const removeReactionMutation = useMutation({
    mutationFn: async () => {
      console.log("üì§ Removendo rea√ß√£o via Z-API:", { 
        phone: contactPhone, 
        messageId: message.id 
      });

      const response = await apiRequest("/api/zapi/remove-reaction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          phone: contactPhone,
          messageId: message.id.toString()
        })
      });

      return response;
    },
    onSuccess: (data) => {
      console.log("‚úÖ Rea√ß√£o removida via Z-API:", data);
      toast({
        title: "Rea√ß√£o removida",
        description: "Sua rea√ß√£o foi removida com sucesso!",
      });
      // Invalidar cache para atualizar a conversa
      queryClient.invalidateQueries({ queryKey: ["/api/conversations", conversationId, "messages"] });
    },
    onError: (error) => {
      console.error("‚ùå Erro ao remover rea√ß√£o:", error);
      toast({
        title: "Erro ao remover rea√ß√£o",
        description: "N√£o foi poss√≠vel remover a rea√ß√£o. Tente novamente.",
        variant: "destructive",
      });
    }
  });

  const handleReactionClick = (reaction: string) => {
    sendReactionMutation.mutate({ reaction });
  };

  const handleRemoveReaction = () => {
    removeReactionMutation.mutate();
  };

  // Verificar se a mensagem j√° tem rea√ß√£o (simulado - seria vindo do backend)
  const hasReaction = false; // TODO: Implementar l√≥gica de verifica√ß√£o de rea√ß√£o existente

  return (
    <div className="flex items-center gap-1">
      {/* Bot√£o para remover rea√ß√£o se existir */}
      {hasReaction && (
        <Button
          variant="ghost"
          size="sm"
          onClick={handleRemoveReaction}
          disabled={removeReactionMutation.isPending}
          className="h-6 w-6 p-0 text-red-500 hover:text-red-600 hover:bg-red-50"
        >
          <X className="w-3 h-3" />
        </Button>
      )}

      {/* Popover de rea√ß√µes */}
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="h-6 w-6 p-0 text-gray-500 hover:text-gray-700 hover:bg-gray-100"
            disabled={sendReactionMutation.isPending}
          >
            {sendReactionMutation.isPending ? (
              <div className="w-3 h-3 animate-spin rounded-full border border-gray-400 border-t-transparent" />
            ) : (
              <Smile className="w-3 h-3" />
            )}
          </Button>
        </PopoverTrigger>
        
        <PopoverContent className="w-80 p-0" align="start">
          <div className="p-3">
            {/* Categorias */}
            <div className="flex gap-1 mb-3 border-b pb-2">
              {Object.entries(REACTION_CATEGORIES).map(([key, category]) => (
                <Button
                  key={key}
                  variant={activeCategory === key ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setActiveCategory(key)}
                  className={cn(
                    "text-xs px-2 py-1 h-7",
                    activeCategory === key && "bg-educhat-primary text-white"
                  )}
                >
                  {category.label}
                </Button>
              ))}
            </div>

            {/* Grid de rea√ß√µes */}
            <div className="grid grid-cols-8 gap-1 max-h-48 overflow-y-auto">
              {REACTION_CATEGORIES[activeCategory as keyof typeof REACTION_CATEGORIES].reactions.map((reaction, index) => (
                <Button
                  key={index}
                  variant="ghost"
                  size="sm"
                  onClick={() => handleReactionClick(reaction)}
                  disabled={sendReactionMutation.isPending}
                  className="h-8 w-8 p-0 text-lg hover:bg-gray-100 transition-colors"
                >
                  {reaction}
                </Button>
              ))}
            </div>

            {/* Rea√ß√µes frequentes */}
            <div className="mt-3 pt-2 border-t">
              <p className="text-xs text-gray-500 mb-2">Rea√ß√µes frequentes:</p>
              <div className="flex gap-1">
                {["‚ù§Ô∏è", "üëç", "üòÇ", "üòÆ", "üò¢", "üò°"].map((reaction, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    onClick={() => handleReactionClick(reaction)}
                    disabled={sendReactionMutation.isPending}
                    className="h-8 w-8 p-0 text-lg hover:bg-gray-100 transition-colors"
                  >
                    {reaction}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  );
}