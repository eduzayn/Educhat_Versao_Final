import { useState } from "react";
import { Button } from "@/shared/ui/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/shared/ui/ui/popover";
import { Smile } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/shared/lib/hooks/use-toast";
import { useChatStore } from "@/shared/store/store/chatStore";
import { cn } from "@/lib/utils";

// Importar categorias do MessageReactions
const REACTION_CATEGORIES = {
  emotions: {
    label: "Emo√ß√µes",
    reactions: ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá", "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö", "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©", "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨"],
  },
  feelings: {
    label: "Sentimentos", 
    reactions: ["ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï"],
  },
  gestures: {
    label: "Gestos",
    reactions: ["üëç", "üëé", "üëå", "ü§å", "ü§è", "‚úåÔ∏è", "ü§û", "ü§ü", "ü§ò", "ü§ô", "üëà", "üëâ", "üëÜ", "üñï", "üëá", "‚òùÔ∏è", "üëè", "üôå", "üëê", "ü§≤", "ü§ù", "üôè", "‚úçÔ∏è", "üí™", "ü¶æ", "ü¶ø", "ü¶µ", "ü¶∂", "üëÇ", "ü¶ª", "üëÉ", "üß†", "ü´Ä", "ü´Å", "ü¶∑", "ü¶¥", "üëÄ", "üëÅÔ∏è", "üëÖ"],
  },
  hearts: {
    label: "Cora√ß√µes",
    reactions: ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî", "‚ù£Ô∏è", "üíï", "üíû", "üíì", "üíó", "üíñ", "üíò", "üíù", "üíü"],
  },
  travel: {
    label: "Viagem",
    reactions: ["üöó", "üöï", "üöô", "üöå", "üöé", "üèéÔ∏è", "üöì", "üöë", "üöí", "üöê", "üõª", "üöö", "üöõ", "üöú", "üèçÔ∏è", "üõµ", "üö≤", "üõ¥", "üõ∫", "üö®", "üöî", "üöç", "üöò", "üöñ", "üö°", "üö†", "üöü", "üöÉ", "üöã", "üöû", "üöù", "üöÑ", "üöÖ", "üöà", "üöÇ", "üöÜ", "üöá", "üöä", "üöâ", "‚úàÔ∏è", "üõ´", "üõ¨", "üõ©Ô∏è", "üí∫", "üõ∞Ô∏è", "üöÄ", "üõ∏", "üöÅ", "‚õµ", "üö§", "üõ•Ô∏è", "üõ≥Ô∏è", "‚õ¥Ô∏è", "üö¢"],
  },
};

// Rea√ß√µes mais usadas para exibir no topo
const COMMON_REACTIONS = ["üëç", "‚ù§Ô∏è", "üòä", "üòÇ", "üò¢", "üòÆ", "üò°", "üéâ"];

interface EmojiReactionPickerProps {
  onEmojiInsert?: (emoji: string) => void;
  className?: string;
}

export function EmojiReactionPicker({ onEmojiInsert, className }: EmojiReactionPickerProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [activeCategory, setActiveCategory] = useState("emotions");
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { activeConversation } = useChatStore();

  // Mutation para enviar rea√ß√£o r√°pida
  const sendQuickReactionMutation = useMutation({
    mutationFn: async ({ reaction }: { reaction: string }) => {
      if (!activeConversation?.contact.phone) {
        throw new Error("N√∫mero de telefone do contato n√£o dispon√≠vel");
      }

      const response = await fetch("/api/zapi/send-reaction", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          phone: activeConversation.contact.phone,
          reaction,
        }),
      });

      if (!response.ok) {
        throw new Error("Falha ao enviar rea√ß√£o");
      }

      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Rea√ß√£o enviada",
        description: "Sua rea√ß√£o foi enviada com sucesso!",
      });
      setIsOpen(false);
    },
    onError: () => {
      toast({
        title: "Erro",
        description: "Falha ao enviar rea√ß√£o.",
        variant: "destructive",
      });
    },
  });

  const handleQuickReaction = (emoji: string) => {
    sendQuickReactionMutation.mutate({ reaction: emoji });
  };

  const insertEmoji = (emoji: string) => {
    if (onEmojiInsert) {
      onEmojiInsert(emoji);
    }
  };

  const ReactionButton = ({ emoji }: { emoji: string }) => (
    <Button
      variant="ghost"
      size="sm"
      onClick={() => insertEmoji(emoji)}
      disabled={sendQuickReactionMutation.isPending}
      className="h-8 w-8 p-0 text-lg hover:bg-gray-100 transition"
      title={`Inserir ${emoji} no texto`}
    >
      {emoji}
    </Button>
  );

  const QuickReactionButton = ({ emoji }: { emoji: string }) => (
    <div className="flex flex-col items-center">
      <ReactionButton emoji={emoji} />
      {activeConversation?.contact.phone && (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => handleQuickReaction(emoji)}
          className="h-6 w-8 p-0 text-xs text-blue-600 hover:bg-blue-50"
          title={`Enviar rea√ß√£o ${emoji}`}
          disabled={sendQuickReactionMutation.isPending}
        >
          ‚Üí
        </Button>
      )}
    </div>
  );

  const ReactionCategoryButton = ({
    keyName,
    label,
  }: {
    keyName: string;
    label: string;
  }) => (
    <Button
      key={keyName}
      variant={activeCategory === keyName ? "default" : "ghost"}
      size="sm"
      onClick={() => setActiveCategory(keyName)}
      className={cn(
        "text-xs px-2 py-1 h-7",
        activeCategory === keyName && "bg-educhat-primary text-white",
      )}
    >
      {label}
    </Button>
  );

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="sm"
          className={cn("p-2.5 text-educhat-medium hover:text-educhat-blue", className)}
          disabled={sendQuickReactionMutation.isPending}
        >
          {sendQuickReactionMutation.isPending ? (
            <div className="w-5.5 h-5.5 animate-spin rounded-full border border-gray-400 border-t-transparent" />
          ) : (
            <Smile className="w-5.5 h-5.5" />
          )}
        </Button>
      </PopoverTrigger>

      <PopoverContent className="w-96 p-0 max-h-[500px]" align="end">
        <div className="flex flex-col h-full">
          {/* Header fixo */}
          <div className="p-3 border-b bg-white">
            <div className="flex items-center justify-between mb-3">
              <h4 className="text-sm font-medium">Emojis & Rea√ß√µes</h4>
              {activeConversation?.contact.phone && (
                <span className="text-xs text-gray-500">
                  Clique para inserir ou enviar rea√ß√£o
                </span>
              )}
            </div>
            
            {/* Rea√ß√µes frequentes no topo */}
            <div className="mb-3">
              <p className="text-xs text-gray-500 mb-2 font-medium">Mais usadas:</p>
              <div className="grid grid-cols-8 gap-1">
                {COMMON_REACTIONS.map((emoji) => (
                  <QuickReactionButton emoji={emoji} key={emoji} />
                ))}
              </div>
            </div>

            {/* Categorias */}
            <div className="flex flex-wrap gap-1">
              {Object.entries(REACTION_CATEGORIES).map(([key, value]) => (
                <ReactionCategoryButton
                  keyName={key}
                  label={value.label}
                  key={key}
                />
              ))}
            </div>
          </div>

          {/* √Årea de scroll com emojis */}
          <div 
            className="flex-1 p-3 overflow-y-auto custom-scrollbar" 
            style={{ 
              maxHeight: '300px'
            }}
          >
            <div className="grid grid-cols-8 gap-2 pb-2">
              {REACTION_CATEGORIES[
                activeCategory as keyof typeof REACTION_CATEGORIES
              ].reactions.map((emoji) => (
                <ReactionButton emoji={emoji} key={emoji} />
              ))}
            </div>
          </div>

          {/* Footer fixo */}
          <div className="p-2 border-t bg-gray-50">
            <p className="text-xs text-gray-400 text-center">
              {REACTION_CATEGORIES[activeCategory as keyof typeof REACTION_CATEGORIES].reactions.length} emojis dispon√≠veis
            </p>
            {!activeConversation?.contact.phone && (
              <p className="text-xs text-gray-600 text-center mt-1">
                Rea√ß√µes dispon√≠veis apenas para contatos do WhatsApp
              </p>
            )}
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}